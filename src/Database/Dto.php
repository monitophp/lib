<?php
/**
 * Database\Dto.
 *
 * @version 1.2.0
 */

namespace MonitoLib\Database;

use MonitoLib\App;
use MonitoLib\Exception\InternalErrorException;

class Dto
{
    public static function get($array, $convertName)
    {
        if (!empty($array)) {
            $properties = isset($array[0]) && is_array($array[0]) ? array_keys($array[0]) : array_keys($array);

            $className = 'dto' . sha1(serialize($properties));

            if (!file_exists(App::getCachePath() . $className . '.php')) {
                self::createDto($className, $properties, $convertName);
            }

            $class = 'cache\\' . $className;

            return new $class();
        }
    }

    private static function createDto($className, $properties, $convertName)
    {
        $db = debug_backtrace();

        $output = "<?php\n"
            . "\n"
            . "/**\n"
            . ' * DTO class autogenerated at ' . date('c') . "\n"
            . ' * created in ' . $db[3]['file'] . ', ' . $db[3]['line'] . "\n"
            . " */\n"
            . "\n"
            . "namespace cache;\n"
            . "\n"
            . "class {$className}\n"
            . "{\n";

        $prp = '';
        $get = '';
        $set = '';

        foreach ($properties as $f) {
            $f = $convertName ? to_lower_camel_case(strtolower($f)) : strtolower($f);
            $g = 'get' . ucfirst($f);
            $s = 'set' . ucfirst($f);

            $prp .= "    private \${$f};\n";

            $get .= "    public function {$g}()\n"
                . "    {\n"
                . "        return \$this->{$f};\n"
                . "    }\n"
                . "\n";

            $set .= "    public function {$s}(\${$f})\n"
                . "    {\n"
                . "        \$this->{$f} = \${$f};\n"
                . "        return \$this;\n"
                . "    }\n"
                . "\n";
        }

        $output .= $prp . "\n" . $get . $set . "}\n";

        if (!@file_put_contents(App::getCachePath() . $className . '.php', $output)) {
            throw new InternalErrorException('Failed to save DTO cache file');
        }
    }
}
